[{"arg":"-agentlib:libname[=options]","comment":"<p>Loads the specified native agent library. After the library name, a comma-separated list of options specific to the library can be used.</p> \n<p>If the option <code dir=\"ltr\">-agentlib:foo</code> is specified, then the JVM attempts to load the library named <code dir=\"ltr\">libfoo.so</code> in the location specified by the <code dir=\"ltr\">LD_LIBRARY_PATH</code> system variable (on OS X this variable is <code dir=\"ltr\">DYLD_LIBRARY_PATH</code>).</p> \n<p>The following example shows how to load the heap profiling tool (HPROF) library and get sample CPU information every 20 ms, with a stack depth of 3:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-agentlib:hprof=cpu=samples,interval=20,depth=3\r\n</pre> \n<p>The following example shows how to load the Java Debug Wire Protocol (JDWP) library and listen for the socket connection on port 8000, suspending the JVM before the main class loads:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-agentlib:jdwp=transport=dt_socket,server=y,address=8000\r\n</pre> \n<p>For more information about the native agent libraries, refer to the following:</p> \n<ul> \n <li> <p>The <code dir=\"ltr\">java.lang.instrument</code> package description at <code dir=\"ltr\"><a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html\">http://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html</a></code></p> </li> \n <li> <p>Agent Command Line Options in the JVM Tools Interface guide at <code dir=\"ltr\"><a href=\"http://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html#starting\">http://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html#starting</a></code></p> </li> \n</ul>","type":"Standard Options"},{"arg":"-agentpath:pathname[=options]","comment":"<p>Loads the native agent library specified by the absolute path name. This option is equivalent to <code dir=\"ltr\">-agentlib</code> but uses the full path and file name of the library.</p>","type":"Standard Options"},{"arg":"-client","comment":"<p>Selects the Java HotSpot Client VM. The 64-bit version of the Java SE Development Kit (JDK) currently ignores this option and instead uses the Server JVM.</p> \n<p>For default JVM selection, see Server-Class Machine Detection at<br> <code dir=\"ltr\"><a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/vm/server-class.html\">http://docs.oracle.com/javase/8/docs/technotes/guides/vm/server-class.html</a></code></p>","type":"Standard Options"},{"arg":"-Dproperty=value","comment":"<p>Sets a system property value. The <i>property</i> variable is a string with no spaces that represents the name of the property. The <i>value</i> variable is a string that represents the value of the property. If <i>value</i> is a string with spaces, then enclose it in quotation marks (for example <code dir=\"ltr\">-Dfoo=\"foo bar\"</code>).</p>","type":"Standard Options"},{"arg":"-d32","comment":"<p>Runs the application in a 32-bit environment. If a 32-bit environment is not installed or is not supported, then an error will be reported. By default, the application is run in a 32-bit environment unless a 64-bit system is used.</p>","type":"Standard Options"},{"arg":"-d64","comment":"<p>Runs the application in a 64-bit environment. If a 64-bit environment is not installed or is not supported, then an error will be reported. By default, the application is run in a 32-bit environment unless a 64-bit system is used.</p> \n<p>Currently only the Java HotSpot Server VM supports 64-bit operation, and the <code dir=\"ltr\">-server</code> option is implicit with the use of <code dir=\"ltr\">-d64</code>. The <code dir=\"ltr\">-client</code> option is ignored with the use of <code dir=\"ltr\">-d64</code>. This is subject to change in a future release.</p>","type":"Standard Options"},{"arg":"-disableassertions[:[packagename]...|:classname] / -da[:[packagename]...|:classname]","comment":"<p>Disables assertions. By default, assertions are disabled in all packages and classes.</p> \n<p>With no arguments, <code dir=\"ltr\">-disableassertions</code> (<code dir=\"ltr\">-da</code>) disables assertions in all packages and classes. With the <i>packagename</i> argument ending in <code dir=\"ltr\">...</code>, the switch disables assertions in the specified package and any subpackages. If the argument is simply <code dir=\"ltr\">...</code>, then the switch disables assertions in the unnamed package in the current working directory. With the <i>classname</i> argument, the switch disables assertions in the specified class.</p> \n<p>The <code dir=\"ltr\">-disableassertions</code> (<code dir=\"ltr\">-da</code>) option applies to all class loaders and to system classes (which do not have a class loader). There is one exception to this rule: if the option is provided with no arguments, then it does not apply to system classes. This makes it easy to disable assertions in all classes except for system classes. The <code dir=\"ltr\">-disablesystemassertions</code> option enables you to disable assertions in all system classes.</p> \n<p>To explicitly enable assertions in specific packages or classes, use the <code dir=\"ltr\">-enableassertions</code> (<code dir=\"ltr\">-ea</code>) option. Both options can be used at the same time. For example, to run the <code dir=\"ltr\">MyClass</code> application with assertions enabled in package <code dir=\"ltr\">com.wombat.fruitbat</code> (and any subpackages) but disabled in class <code dir=\"ltr\">com.wombat.fruitbat.Brickbat</code>, use the following command:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\njava -ea:com.wombat.fruitbat... -da:com.wombat.fruitbat.Brickbat MyClass\r\n</pre>","type":"Standard Options"},{"arg":"-disablesystemassertions / -dsa","comment":"<p>Disables assertions in all system classes.</p>","type":"Standard Options"},{"arg":"-enableassertions[:[packagename]...|:classname] / -ea[:[packagename]...|:classname]","comment":"<p>Enables assertions. By default, assertions are disabled in all packages and classes.</p> \n<p>With no arguments, <code dir=\"ltr\">-enableassertions</code> (<code dir=\"ltr\">-ea</code>) enables assertions in all packages and classes. With the <i>packagename</i> argument ending in <code dir=\"ltr\">...</code>, the switch enables assertions in the specified package and any subpackages. If the argument is simply <code dir=\"ltr\">...</code>, then the switch enables assertions in the unnamed package in the current working directory. With the <i>classname</i> argument, the switch enables assertions in the specified class.</p> \n<p>The <code dir=\"ltr\">-enableassertions</code> (<code dir=\"ltr\">-ea</code>) option applies to all class loaders and to system classes (which do not have a class loader). There is one exception to this rule: if the option is provided with no arguments, then it does not apply to system classes. This makes it easy to enable assertions in all classes except for system classes. The <code dir=\"ltr\">-enablesystemassertions</code> option provides a separate switch to enable assertions in all system classes.</p> \n<p>To explicitly disable assertions in specific packages or classes, use the <code dir=\"ltr\">-disableassertions</code> (<code dir=\"ltr\">-da</code>) option. If a single command contains multiple instances of these switches, then they are processed in order before loading any classes. For example, to run the <code dir=\"ltr\">MyClass</code> application with assertions enabled only in package <code dir=\"ltr\">com.wombat.fruitbat</code> (and any subpackages) but disabled in class <code dir=\"ltr\">com.wombat.fruitbat.Brickbat</code>, use the following command:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\njava -ea:com.wombat.fruitbat... -da:com.wombat.fruitbat.Brickbat MyClass\r\n</pre>","type":"Standard Options"},{"arg":"-enablesystemassertions / -esa","comment":"<p>Enables assertions in all system classes.</p>","type":"Standard Options"},{"arg":"-help / -?","comment":"<p>Displays usage information for the <code dir=\"ltr\">java</code> command without actually running the JVM.</p>","type":"Standard Options"},{"arg":"-jar filename","comment":"<p>Executes a program encapsulated in a JAR file. The <i>filename</i> argument is the name of a JAR file with a manifest that contains a line in the form <code dir=\"ltr\">Main-Class:</code><code dir=\"ltr\"><span>classname</span></code> that defines the class with the <code dir=\"ltr\">public static void main(String[] args)</code> method that serves as your application's starting point.</p> \n<p>When you use the <code dir=\"ltr\">-jar</code> option, the specified JAR file is the source of all user classes, and other class path settings are ignored.</p> \n<p>For more information about JAR files, see the following resources:</p> \n<ul> \n <li> <p><a href=\"jar.html#BGBEJEEG\"><code dir=\"ltr\">jar</code>(1)</a></p> </li> \n <li> <p>The Java Archive (JAR) Files guide at <code dir=\"ltr\"><a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/jar/index.html\">http://docs.oracle.com/javase/8/docs/technotes/guides/jar/index.html</a></code></p> </li> \n <li> <p>Lesson: Packaging Programs in JAR Files at<br> <code dir=\"ltr\"><a href=\"http://docs.oracle.com/javase/tutorial/deployment/jar/index.html\">http://docs.oracle.com/javase/tutorial/deployment/jar/index.html</a></code></p> </li> \n</ul>","type":"Standard Options"},{"arg":"-javaagent:jarpath[=options]","comment":"<p>Loads the specified Java programming language agent. For more information about instrumenting Java applications, see the <code dir=\"ltr\">java.lang.instrument</code> package description in the Java API documentation at <code dir=\"ltr\"><a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html\">http://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html</a></code></p>","type":"Standard Options"},{"arg":"-jre-restrict-search","comment":"<p>Includes user-private JREs in the version search.</p>","type":"Standard Options"},{"arg":"-no-jre-restrict-search","comment":"<p>Excludes user-private JREs from the version search.</p>","type":"Standard Options"},{"arg":"-server","comment":"<p>Selects the Java HotSpot Server VM. The 64-bit version of the JDK supports only the Server VM, so in that case the option is implicit.</p> \n<p>For default JVM selection, see Server-Class Machine Detection at<br> <code dir=\"ltr\"><a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/vm/server-class.html\">http://docs.oracle.com/javase/8/docs/technotes/guides/vm/server-class.html</a></code></p>","type":"Standard Options"},{"arg":"-showversion","comment":"<p>Displays version information and continues execution of the application. This option is equivalent to the <code dir=\"ltr\">-version</code> option except that the latter instructs the JVM to exit after displaying version information.</p>","type":"Standard Options"},{"arg":"-splash:imgname","comment":"<p>Shows the splash screen with the image specified by <i>imgname</i>. For example, to show the <code dir=\"ltr\">splash.gif</code> file from the <code dir=\"ltr\">images</code> directory when starting your application, use the following option:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-splash:images/splash.gif\r\n</pre>","type":"Standard Options"},{"arg":"-verbose:class","comment":"<p>Displays information about each loaded class.</p>","type":"Standard Options"},{"arg":"-verbose:gc","comment":"<p>Displays information about each garbage collection (GC) event.</p>","type":"Standard Options"},{"arg":"-verbose:jni","comment":"<p>Displays information about the use of native methods and other Java Native Interface (JNI) activity.</p>","type":"Standard Options"},{"arg":"-version","comment":"<p>Displays version information and then exits. This option is equivalent to the <code dir=\"ltr\">-showversion</code> option except that the latter does not instruct the JVM to exit after displaying version information.</p>","type":"Standard Options"},{"arg":"-version:release","comment":"<p>Specifies the release version to be used for running the application. If the version of the <code dir=\"ltr\">java</code> command called does not meet this specification and an appropriate implementation is found on the system, then the appropriate implementation will be used.</p> \n<p>The <i>release</i> argument specifies either the exact version string, or a list of version strings and ranges separated by spaces. A <i>version string</i> is the developer designation of the version number in the following form: <code dir=\"ltr\">1.</code><i>x</i><code dir=\"ltr\">.0_</code><i>u</i> (where <i>x</i> is the major version number, and <i>u</i> is the update version number). A <i>version range</i> is made up of a version string followed by a plus sign (<code dir=\"ltr\">+</code>) to designate this version or later, or a part of a version string followed by an asterisk (<code dir=\"ltr\">*</code>) to designate any version string with a matching prefix. Version strings and ranges can be combined using a space for a logical <i>OR</i> combination, or an ampersand (<code dir=\"ltr\">&amp;</code>) for a logical <i>AND</i> combination of two version strings/ranges. For example, if running the class or JAR file requires either JRE 6u13 (1.6.0_13), or any JRE 6 starting from 6u10 (1.6.0_10), specify the following:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-version:\"1.6.0_13 1.6* &amp; 1.6.0_10+\"\r\n</pre> \n<p>Quotation marks are necessary only if there are spaces in the <i>release</i> parameter.</p> \n<p>For JAR files, the preference is to specify version requirements in the JAR file manifest rather than on the command line.</p>","type":"Standard Options"},{"arg":"-X","comment":"<p>Displays help for all available <code dir=\"ltr\">-X</code> options.</p>","type":"Non-Standard Options"},{"arg":"-Xbatch","comment":"<p>Disables background compilation. By default, the JVM compiles the method as a background task, running the method in interpreter mode until the background compilation is finished. The <code dir=\"ltr\">-Xbatch</code> flag disables background compilation so that compilation of all methods proceeds as a foreground task until completed.</p> \n<p>This option is equivalent to <code dir=\"ltr\">-XX:-BackgroundCompilation</code>.</p>","type":"Non-Standard Options"},{"arg":"-Xbootclasspath:path","comment":"<p>Specifies a list of directories, JAR files, and ZIP archives separated by colons (:) to search for boot class files. These are used in place of the boot class files included in the JDK.</p> \n<p>Do not deploy applications that use this option to override a class in <code dir=\"ltr\">rt.jar</code>, because this violates the JRE binary code license.</p>","type":"Non-Standard Options"},{"arg":"-Xbootclasspath/a:path","comment":"<p>Specifies a list of directories, JAR files, and ZIP archives separated by colons (:) to append to the end of the default bootstrap class path.</p> \n<p>Do not deploy applications that use this option to override a class in <code dir=\"ltr\">rt.jar</code>, because this violates the JRE binary code license.</p>","type":"Non-Standard Options"},{"arg":"-Xbootclasspath/p:path","comment":"<p>Specifies a list of directories, JAR files, and ZIP archives separated by colons (:) to prepend to the front of the default bootstrap class path.</p> \n<p>Do not deploy applications that use this option to override a class in <code dir=\"ltr\">rt.jar</code>, because this violates the JRE binary code license.</p>","type":"Non-Standard Options"},{"arg":"-Xcheck:jni","comment":"<p>Performs additional checks for Java Native Interface (JNI) functions. Specifically, it validates the parameters passed to the JNI function and the runtime environment data before processing the JNI request. Any invalid data encountered indicates a problem in the native code, and the JVM will terminate with an irrecoverable error in such cases. Expect a performance degradation when this option is used.</p>","type":"Non-Standard Options"},{"arg":"-Xcomp","comment":"<p>Forces compilation of methods on first invocation. By default, the Client VM (<code dir=\"ltr\">-client</code>) performs 1,000 interpreted method invocations and the Server VM (<code dir=\"ltr\">-server</code>) performs 10,000 interpreted method invocations to gather information for efficient compilation. Specifying the <code dir=\"ltr\">-Xcomp</code> option disables interpreted method invocations to increase compilation performance at the expense of efficiency.</p> \n<p>You can also change the number of interpreted method invocations before compilation using the <code dir=\"ltr\">-XX:CompileThreshold</code> option.</p>","type":"Non-Standard Options"},{"arg":"-Xdebug","comment":"<p>Does nothing. Provided for backward compatibility.</p>","type":"Non-Standard Options"},{"arg":"-Xdiag","comment":"<p>Shows additional diagnostic messages.</p>","type":"Non-Standard Options"},{"arg":"-Xfuture","comment":"<p>Enables strict class-file format checks that enforce close conformance to the class-file format specification. Developers are encouraged to use this flag when developing new code because the stricter checks will become the default in future releases.</p>","type":"Non-Standard Options"},{"arg":"-Xint","comment":"<p>Runs the application in interpreted-only mode. Compilation to native code is disabled, and all bytecode is executed by the interpreter. The performance benefits offered by the just in time (JIT) compiler are not present in this mode.</p>","type":"Non-Standard Options"},{"arg":"-Xinternalversion","comment":"<p>Displays more detailed JVM version information than the <code dir=\"ltr\">-version</code> option, and then exits.</p>","type":"Non-Standard Options"},{"arg":"-Xloggc:filename","comment":"<p>Sets the file to which verbose GC events information should be redirected for logging. The information written to this file is similar to the output of <code dir=\"ltr\">-verbose:gc</code> with the time elapsed since the first GC event preceding each logged event. The <code dir=\"ltr\">-Xloggc</code> option overrides <code dir=\"ltr\">-verbose:gc</code> if both are given with the same <code dir=\"ltr\">java</code> command.</p> \n<p>Example:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-Xloggc:garbage-collection.log\r\n</pre>","type":"Non-Standard Options"},{"arg":"-Xmaxjitcodesize=size","comment":"<p>Specifies the maximum code cache size (in bytes) for JIT-compiled code. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. The default maximum code cache size is 240 MB; if you disable tiered compilation with the option <code dir=\"ltr\">-XX:-TieredCompilation</code>, then the default size is 48 MB:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-Xmaxjitcodesize=240m\r\n</pre> \n<p>This option is equivalent to <code dir=\"ltr\">-XX:ReservedCodeCacheSize</code>.</p>","type":"Non-Standard Options"},{"arg":"-Xmixed","comment":"<p>Executes all bytecode by the interpreter except for hot methods, which are compiled to native code.</p>","type":"Non-Standard Options"},{"arg":"-Xmnsize","comment":"<p>Sets the initial and maximum size (in bytes) of the heap for the young generation (nursery). Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes.</p> \n<p>The young generation region of the heap is used for new objects. GC is performed in this region more often than in other regions. If the size for the young generation is too small, then a lot of minor garbage collections will be performed. If the size is too large, then only full garbage collections will be performed, which can take a long time to complete. Oracle recommends that you keep the size for the young generation between a half and a quarter of the overall heap size.</p> \n<p>The following examples show how to set the initial and maximum size of young generation to 256 MB using various units:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-Xmn256m\r\n-Xmn262144k\r\n-Xmn268435456\r\n</pre> \n<p>Instead of the <code dir=\"ltr\">-Xmn</code> option to set both the initial and maximum size of the heap for the young generation, you can use <code dir=\"ltr\">-XX:NewSize</code> to set the initial size and <code dir=\"ltr\">-XX:MaxNewSize</code> to set the maximum size.</p>","type":"Non-Standard Options"},{"arg":"-Xmssize","comment":"<p>Sets the initial size (in bytes) of the heap. This value must be a multiple of 1024 and greater than 1 MB. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes.</p> \n<p>The following examples show how to set the size of allocated memory to 6 MB using various units:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-Xms6291456\r\n-Xms6144k\r\n-Xms6m\r\n</pre> \n<p>If you do not set this option, then the initial size will be set as the sum of the sizes allocated for the old generation and the young generation. The initial size of the heap for the young generation can be set using the <code dir=\"ltr\">-Xmn</code> option or the <code dir=\"ltr\">-XX:NewSize</code> option.</p>","type":"Non-Standard Options"},{"arg":"-Xmxsize","comment":"<p>Specifies the maximum size (in bytes) of the memory allocation pool in bytes. This value must be a multiple of 1024 and greater than 2 MB. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. The default value is chosen at runtime based on system configuration. For server deployments, <code dir=\"ltr\">-Xms</code> and <code dir=\"ltr\">-Xmx</code> are often set to the same value. See the section \"Ergonomics\" in <i>Java SE HotSpot Virtual Machine Garbage Collection Tuning Guide</i> at <code dir=\"ltr\"><a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html\">http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html</a></code>.</p> \n<p>The following examples show how to set the maximum allowed size of allocated memory to 80 MB using various units:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-Xmx83886080\r\n-Xmx81920k\r\n-Xmx80m\r\n</pre> \n<p>The <code dir=\"ltr\">-Xmx</code> option is equivalent to <code dir=\"ltr\">-XX:MaxHeapSize</code>.</p>","type":"Non-Standard Options"},{"arg":"-Xnoclassgc","comment":"<p>Disables garbage collection (GC) of classes. This can save some GC time, which shortens interruptions during the application run.</p> \n<p>When you specify <code dir=\"ltr\">-Xnoclassgc</code> at startup, the class objects in the application will be left untouched during GC and will always be considered live. This can result in more memory being permanently occupied which, if not used carefully, will throw an out of memory exception.</p>","type":"Non-Standard Options"},{"arg":"-Xprof","comment":"<p>Profiles the running program and sends profiling data to standard output. This option is provided as a utility that is useful in program development and is not intended to be used in production systems.</p>","type":"Non-Standard Options"},{"arg":"-Xrs","comment":"<p>Reduces the use of operating system signals by the JVM.</p> \n<p>Shutdown hooks enable orderly shutdown of a Java application by running user cleanup code (such as closing database connections) at shutdown, even if the JVM terminates abruptly.</p> \n<p>The JVM catches signals to implement shutdown hooks for unexpected termination. The JVM uses <code dir=\"ltr\">SIGHUP</code>, <code dir=\"ltr\">SIGINT</code>, and <code dir=\"ltr\">SIGTERM</code> to initiate the running of shutdown hooks.</p> \n<p>The JVM uses a similar mechanism to implement the feature of dumping thread stacks for debugging purposes. The JVM uses <code dir=\"ltr\">SIGQUIT</code> to perform thread dumps.</p> \n<p>Applications embedding the JVM frequently need to trap signals such as <code dir=\"ltr\">SIGINT</code> or <code dir=\"ltr\">SIGTERM</code>, which can lead to interference with the JVM signal handlers. The <code dir=\"ltr\">-Xrs</code> option is available to address this issue. When <code dir=\"ltr\">-Xrs</code> is used, the signal masks for <code dir=\"ltr\">SIGINT</code>, <code dir=\"ltr\">SIGTERM</code>, <code dir=\"ltr\">SIGHUP</code>, and <code dir=\"ltr\">SIGQUIT</code> are not changed by the JVM, and signal handlers for these signals are not installed.</p> \n<p>There are two consequences of specifying <code dir=\"ltr\">-Xrs</code>:</p> \n<ul> \n <li> <p><code dir=\"ltr\">SIGQUIT</code> thread dumps are not available.</p> </li> \n <li> <p>User code is responsible for causing shutdown hooks to run, for example, by calling <code dir=\"ltr\">System.exit()</code> when the JVM is to be terminated.</p> </li> \n</ul>","type":"Non-Standard Options"},{"arg":"-Xshare:mode","comment":"<p>Sets the class data sharing (CDS) mode. Possible <i>mode</i> arguments for this option include the following:</p> \n<dl> \n <dt>\n  auto\n </dt> \n <dd> \n  <p>Use CDS if possible. This is the default value for Java HotSpot 32-Bit Client VM.</p> \n </dd> \n <dt>\n  on\n </dt> \n <dd> \n  <p>Require the use of CDS. Print an error message and exit if class data sharing cannot be used.</p> \n </dd> \n <dt>\n  off\n </dt> \n <dd> \n  <p>Do not use CDS. This is the default value for Java HotSpot 32-Bit Server VM, Java HotSpot 64-Bit Client VM, and Java HotSpot 64-Bit Server VM.</p> \n </dd> \n <dt>\n  dump\n </dt> \n <dd> \n  <p>Manually generate the CDS archive. Specify the application class path as described in <a href=\"classpath.html#CBHHCGFB\">\"Setting the Class Path\"</a>.</p> \n  <p>You should regenerate the CDS archive with each new JDK release.</p> \n </dd> \n</dl>","type":"Non-Standard Options"},{"arg":"-XshowSettings:category","comment":"<p>Shows settings and continues. Possible <i>category</i> arguments for this option include the following:</p> \n<dl> \n <dt>\n  all\n </dt> \n <dd> \n  <p>Shows all categories of settings. This is the default value.</p> \n </dd> \n <dt>\n  locale\n </dt> \n <dd> \n  <p>Shows settings related to locale.</p> \n </dd> \n <dt>\n  properties\n </dt> \n <dd> \n  <p>Shows settings related to system properties.</p> \n </dd> \n <dt>\n  vm\n </dt> \n <dd> \n  <p>Shows the settings of the JVM.</p> \n </dd> \n</dl>","type":"Non-Standard Options"},{"arg":"-Xsssize","comment":"<p>Sets the thread stack size (in bytes). Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate KB, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate MB, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate GB. The default value depends on the platform:</p> \n<ul> \n <li> <p>Linux/ARM (32-bit): 320 KB</p> </li> \n <li> <p>Linux/i386 (32-bit): 320 KB</p> </li> \n <li> <p>Linux/x64 (64-bit): 1024 KB</p> </li> \n <li> <p>OS X (64-bit): 1024 KB</p> </li> \n <li> <p>Oracle Solaris/i386 (32-bit): 320 KB</p> </li> \n <li> <p>Oracle Solaris/x64 (64-bit): 1024 KB</p> </li> \n</ul> \n<p>The following examples set the thread stack size to 1024 KB in different units:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-Xss1m\r\n-Xss1024k\r\n-Xss1048576\r\n</pre> \n<p>This option is equivalent to <code dir=\"ltr\">-XX:ThreadStackSize</code>.</p>","type":"Non-Standard Options"},{"arg":"-Xusealtsigs","comment":"<p>Use alternative signals instead of <code dir=\"ltr\">SIGUSR1</code> and <code dir=\"ltr\">SIGUSR2</code> for JVM internal signals. This option is equivalent to <code dir=\"ltr\">-XX:+UseAltSigs</code>.</p>","type":"Non-Standard Options"},{"arg":"-Xverify:mode","comment":"<p>Sets the mode of the bytecode verifier. Bytecode verification ensures that class files are properly formed and satisfy the constraints listed in <i>The Java Virtual Machine Specification</i>; see section 4.10, \"Verification of <code dir=\"ltr\">class</code> Files\":</p> \n<p><code dir=\"ltr\"><a href=\"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.10\">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.10</a></code></p> \n<p>Do not turn off verification when running dynamically generated or untrusted class files as this reduces the protection provided by Java and makes diagnosing problems with ill-formed bytecodes more difficult.</p> \n<p>Possible <i>mode</i> arguments for this option include the following:</p> \n<dl> \n <dt>\n  remote\n </dt> \n <dd> \n  <p>Verifies all bytecodes not loaded by the bootstrap class loader. This is the default behavior.</p> \n </dd> \n <dt>\n  all\n </dt> \n <dd> \n  <p>Enables verification of all bytecodes.</p> \n </dd> \n <dt>\n  none\n </dt> \n <dd> \n  <p>Disables verification of all bytecodes.</p> \n </dd> \n</dl>","type":"Non-Standard Options"},{"arg":"-XX:+CheckEndorsedAndExtDirs","comment":"<p>Enables the option to prevent the <code dir=\"ltr\">java</code> command from running a Java application if it uses the endorsed-standards override mechanism or the extension mechanism. This option checks if an application is using one of these mechanisms by checking the following:</p> \n<ul> \n <li> <p>The <code dir=\"ltr\">java.ext.dirs</code> or <code dir=\"ltr\">java.endorsed.dirs</code> system property is set.</p> </li> \n <li> <p>The <code dir=\"ltr\">lib/endorsed</code> directory exists and is not empty.</p> </li> \n <li> <p>The <code dir=\"ltr\">lib/ext</code> directory contains any JAR files other than those of the JDK.</p> </li> \n <li> <p>The system-wide platform-specific extension directory contains any JAR files.</p> </li> \n</ul>","type":"Advanced Runtime Options"},{"arg":"-XX:+DisableAttachMechanism","comment":"<p>Enables the option that disables the mechanism that lets tools attach to the JVM. By default, this option is disabled, meaning that the attach mechanism is enabled and you can use tools such as <code dir=\"ltr\">jcmd</code>, <code dir=\"ltr\">jstack</code>, <code dir=\"ltr\">jmap</code>, and <code dir=\"ltr\">jinfo</code>.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:ErrorFile=filename","comment":"<p>Specifies the path and file name to which error data is written when an irrecoverable error occurs. By default, this file is created in the current working directory and named <code dir=\"ltr\">hs_err_pid</code><i>pid</i><code dir=\"ltr\">.log</code> where <i>pid</i> is the identifier of the process that caused the error. The following example shows how to set the default log file (note that the identifier of the process is specified as <code dir=\"ltr\">%p</code>):</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:ErrorFile=./hs_err_pid%p.log\r\n</pre> \n<p>The following example shows how to set the error log to <code dir=\"ltr\">/var/log/java/java_error.log</code>:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:ErrorFile=/var/log/java/java_error.log\r\n</pre> \n<p>If the file cannot be created in the specified directory (due to insufficient space, permission problem, or another issue), then the file is created in the temporary directory for the operating system. The temporary directory is <code dir=\"ltr\">/tmp</code>.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+FailOverToOldVerifier","comment":"<p>Enables automatic failover to the old verifier when the new type checker fails. By default, this option is disabled and it is ignored (that is, treated as disabled) for classes with a recent bytecode version. You can enable it for classes with older versions of the bytecode.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+FlightRecorder","comment":"<p>Enables the use of the Java Flight Recorder (JFR) during the runtime of the application. This is a commercial feature that works in conjunction with the <code dir=\"ltr\">-XX:+UnlockCommercialFeatures</code> option as follows:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\njava -XX:+UnlockCommercialFeatures -XX:+FlightRecorder\r\n</pre> \n<p>If this option is not provided, Java Flight Recorder can still be enabled in a running JVM by providing the appropriate <code dir=\"ltr\">jcmd</code> diagnostic commands.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:-FlightRecorder","comment":"<p>Disables the use of the Java Flight Recorder (JFR) during the runtime of the application. This is a commercial feature that works in conjunction with the <code dir=\"ltr\">-XX:+UnlockCommercialFeatures</code> option as follows:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\njava -XX:+UnlockCommercialFeatures -XX:-FlightRecorder\r\n</pre> \n<p>If this option is provided, Java Flight Recorder cannot be enabled in a running JVM.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:FlightRecorderOptions=parameter=value","comment":"<p>Sets the parameters that control the behavior of JFR. This is a commercial feature that works in conjunction with the <code dir=\"ltr\">-XX:+UnlockCommercialFeatures</code> option. This option can be used only when JFR is enabled (that is, the <code dir=\"ltr\">-XX:+FlightRecorder</code> option is specified).</p> \n<p>The following list contains all available JFR parameters:</p> \n<dl> \n <dt>\n  defaultrecording={true|false}\n </dt> \n <dd> \n  <p>Specifies whether the recording is a continuous background recording or if it runs for a limited time. By default, this parameter is set to <code dir=\"ltr\">false</code> (recording runs for a limited time). To make the recording run continuously, set the parameter to <code dir=\"ltr\">true</code>.</p> \n </dd> \n <dt>\n  disk={true|false}\n </dt> \n <dd> \n  <p>Specifies whether JFR should write a continuous recording to disk. By default, this parameter is set to <code dir=\"ltr\">false</code> (continuous recording to disk is disabled). To enable it, set the parameter to <code dir=\"ltr\">true</code>, and also set <code dir=\"ltr\">defaultrecording=true</code>.</p> \n </dd> \n <dt>\n  dumponexit={true|false}\n </dt> \n <dd> \n  <p>Specifies whether a dump file of JFR data should be generated when the JVM terminates in a controlled manner. By default, this parameter is set to <code dir=\"ltr\">false</code> (dump file on exit is not generated). To enable it, set the parameter to <code dir=\"ltr\">true</code>, and also set <code dir=\"ltr\">defaultrecording=true</code>.</p> \n  <p>The dump file is written to the location defined by the <code dir=\"ltr\">dumponexitpath</code> parameter.</p> \n </dd> \n <dt>\n  dumponexitpath=\n  <i>path</i>\n </dt> \n <dd> \n  <p>Specifies the path and name of the dump file with JFR data that is created when the JVM exits in a controlled manner if you set the <code dir=\"ltr\">dumponexit=true</code> parameter. Setting the path makes sense only if you also set <code dir=\"ltr\">defaultrecording=true</code>.</p> \n  <p>If the specified path is a directory, the JVM assigns a file name that shows the creation date and time. If the specified path includes a file name and if that file already exists, the JVM creates a new file by appending the date and time stamp to the specified file name.</p> \n </dd> \n <dt>\n  globalbuffersize=\n  <i>size</i>\n </dt> \n <dd> \n  <p>Specifies the total amount of primary memory (in bytes) used for data retention. Append <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code>, to specify the size in KB, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to specify the size in MB, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to specify the size in GB. By default, the size is set to 462848 bytes.</p> \n </dd> \n <dt>\n  loglevel={quiet|error|warning|info|debug|trace}\n </dt> \n <dd> \n  <p>Specify the amount of data written to the log file by JFR. By default, it is set to <code dir=\"ltr\">info</code>.</p> \n </dd> \n <dt>\n  maxage=\n  <i>time</i>\n </dt> \n <dd> \n  <p>Specifies the maximum age of disk data to keep for the default recording. Append <code dir=\"ltr\">s</code> to specify the time in seconds, <code dir=\"ltr\">m</code> for minutes, <code dir=\"ltr\">h</code> for hours, or <code dir=\"ltr\">d</code> for days (for example, specifying <code dir=\"ltr\">30s</code> means 30 seconds). By default, the maximum age is set to 15 minutes (<code dir=\"ltr\">15m</code>).</p> \n  <p>This parameter is valid only if you set the <code dir=\"ltr\">disk=true</code> parameter.</p> \n </dd> \n <dt>\n  maxchunksize=\n  <i>size</i>\n </dt> \n <dd> \n  <p>Specifies the maximum size (in bytes) of the data chunks in a recording. Append <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code>, to specify the size in KB, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to specify the size in MB, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to specify the size in GB. By default, the maximum size of data chunks is set to 12 MB.</p> \n </dd> \n <dt>\n  maxsize=\n  <i>size</i>\n </dt> \n <dd> \n  <p>Specifies the maximum size (in bytes) of disk data to keep for the default recording. Append <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code>, to specify the size in KB, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to specify the size in MB, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to specify the size in GB. By default, the maximum size of disk data is not limited, and this parameter is set to 0.</p> \n  <p>This parameter is valid only if you set the <code dir=\"ltr\">disk=true</code> parameter.</p> \n </dd> \n <dt>\n  repository=\n  <i>path</i>\n </dt> \n <dd> \n  <p>Specifies the repository (a directory) for temporary disk storage. By default, the system's temporary directory is used.</p> \n </dd> \n <dt>\n  samplethreads={true|false}\n </dt> \n <dd> \n  <p>Specifies whether thread sampling is enabled. Thread sampling occurs only if the sampling event is enabled along with this parameter. By default, this parameter is enabled.</p> \n </dd> \n <dt>\n  settings=\n  <i>path</i>\n </dt> \n <dd> \n  <p>Specifies the path and name of the event settings file (of type JFC). By default, the <code dir=\"ltr\">default.jfc</code> file is used, which is located in <code dir=\"ltr\">JAVA_HOME/jre/lib/jfr</code>.</p> \n </dd> \n <dt>\n  stackdepth=\n  <i>depth</i>\n </dt> \n <dd> \n  <p>Stack depth for stack traces by JFR. By default, the depth is set to 64 method calls. The maximum is 2048, minimum is 1.</p> \n </dd> \n <dt>\n  threadbuffersize=\n  <i>size</i>\n </dt> \n <dd> \n  <p>Specifies the per-thread local buffer size (in bytes). Append <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code>, to specify the size in KB, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to specify the size in MB, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to specify the size in GB. Higher values for this parameter allow more data gathering without contention to flush it to the global storage. It can increase application footprint in a thread-rich environment. By default, the local buffer size is set to 5 KB.</p> \n </dd> \n</dl> \n<p>You can specify values for multiple parameters by separating them with a comma. For example, to instruct JFR to write a continuous recording to disk, and set the maximum size of data chunks to 10 MB, specify the following:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:FlightRecorderOptions=defaultrecording=true,disk=true,maxchunksize=10M\r\n</pre>","type":"Advanced Runtime Options"},{"arg":"-XX:LargePageSizeInBytes=size","comment":"<p>On Solaris, sets the maximum size (in bytes) for large pages used for Java heap. The <i>size</i> argument must be a power of 2 (2, 4, 8, 16, ...). Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. By default, the size is set to 0, meaning that the JVM chooses the size for large pages automatically.</p> \n<p>The following example illustrates how to set the large page size to 4 megabytes (MB):</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:LargePageSizeInBytes=4m\r\n</pre>","type":"Advanced Runtime Options"},{"arg":"-XX:MaxDirectMemorySize=size","comment":"<p>Sets the maximum total size (in bytes) of the New I/O (the <code dir=\"ltr\">java.nio</code> package) direct-buffer allocations. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. By default, the size is set to 0, meaning that the JVM chooses the size for NIO direct-buffer allocations automatically.</p> \n<p>The following examples illustrate how to set the NIO size to 1024 KB in different units:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:MaxDirectMemorySize=1m\r\n-XX:MaxDirectMemorySize=1024k\r\n-XX:MaxDirectMemorySize=1048576\r\n</pre>","type":"Advanced Runtime Options"},{"arg":"-XX:NativeMemoryTracking=mode","comment":"<p>Specifies the mode for tracking JVM native memory usage. Possible <i>mode</i> arguments for this option include the following:</p> \n<dl> \n <dt>\n  off\n </dt> \n <dd> \n  <p>Do not track JVM native memory usage. This is the default behavior if you do not specify the <code dir=\"ltr\">-XX:NativeMemoryTracking</code> option.</p> \n </dd> \n <dt>\n  summary\n </dt> \n <dd> \n  <p>Only track memory usage by JVM subsystems, such as Java heap, class, code, and thread.</p> \n </dd> \n <dt>\n  detail\n </dt> \n <dd> \n  <p>In addition to tracking memory usage by JVM subsystems, track memory usage by individual <code dir=\"ltr\">CallSite</code>, individual virtual memory region and its committed regions.</p> \n </dd> \n</dl>","type":"Advanced Runtime Options"},{"arg":"-XX:ObjectAlignmentInBytes=alignment","comment":"<p>Sets the memory alignment of Java objects (in bytes). By default, the value is set to 8 bytes. The specified value should be a power of two, and must be within the range of 8 and 256 (inclusive). This option makes it possible to use compressed pointers with large Java heap sizes.</p> \n<p>The heap size limit in bytes is calculated as:</p> \n<p><code dir=\"ltr\">4GB * ObjectAlignmentInBytes</code></p> \n<p>Note: As the alignment value increases, the unused space between objects will also increase. As a result, you may not realize any benefits from using compressed pointers with large Java heap sizes.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:OnError=string","comment":"<p>Sets a custom command or a series of semicolon-separated commands to run when an irrecoverable error occurs. If the string contains spaces, then it must be enclosed in quotation marks.</p> \n<p>The following example shows how the <code dir=\"ltr\">-XX:OnError</code> option can be used to run the <code dir=\"ltr\">gcore</code> command to create the core image, and the debugger is started to attach to the process in case of an irrecoverable error (the <code dir=\"ltr\">%p</code> designates the current process):</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:OnError=\"gcore %p;dbx - %p\"\r\n</pre>","type":"Advanced Runtime Options"},{"arg":"-XX:OnOutOfMemoryError=string","comment":"<p>Sets a custom command or a series of semicolon-separated commands to run when an <code dir=\"ltr\">OutOfMemoryError</code> exception is first thrown. If the string contains spaces, then it must be enclosed in quotation marks. For an example of a command string, see the description of the <code dir=\"ltr\">-XX:OnError</code> option.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+PerfDataSaveToFile","comment":"<p>If enabled, saves <a href=\"jstat.html#BEHBBBDJ\"><code dir=\"ltr\">jstat</code>(1)</a> binary data when the Java application exits. This binary data is saved in a file named <code dir=\"ltr\">hsperfdata_</code><code dir=\"ltr\"><span>&lt;pid&gt;</span></code>, where <code dir=\"ltr\"><span>&lt;pid&gt;</span></code> is the process identifier of the Java application you ran. Use <code dir=\"ltr\">jstat</code> to display the performance data contained in this file as follows:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\njstat -class file:///<span>&lt;path&gt;</span>/hsperfdata_<span>&lt;pid&gt;</span>\r\njstat -gc file:///<span>&lt;path&gt;</span>/hsperfdata_<span>&lt;pid&gt;</span>\r\n</pre>","type":"Advanced Runtime Options"},{"arg":"-XX:+PrintCommandLineFlags","comment":"<p>Enables printing of ergonomically selected JVM flags that appeared on the command line. It can be useful to know the ergonomic values set by the JVM, such as the heap space size and the selected garbage collector. By default, this option is disabled and flags are not printed.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+PrintNMTStatistics","comment":"<p>Enables printing of collected native memory tracking data at JVM exit when native memory tracking is enabled (see <code dir=\"ltr\">-XX:NativeMemoryTracking</code>). By default, this option is disabled and native memory tracking data is not printed.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+RelaxAccessControlCheck","comment":"<p>Decreases the amount of access control checks in the verifier. By default, this option is disabled, and it is ignored (that is, treated as disabled) for classes with a recent bytecode version. You can enable it for classes with older versions of the bytecode.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+ResourceManagement","comment":"<p>Enables the use of Resource Management during the runtime of the application.</p> \n<p>This is a commercial feature that requires you to also specify the <code dir=\"ltr\">-XX:+UnlockCommercialFeatures</code> option as follows:</p> \n<p><code dir=\"ltr\">java -XX:+UnlockCommercialFeatures -XX:+ResourceManagement</code></p>","type":"Advanced Runtime Options"},{"arg":"-XX:ResourceManagementSampleInterval=value (milliseconds)","comment":"<p>Sets the parameter that controls the sampling interval for Resource Management measurements, in milliseconds.</p> \n<p>This option can be used only when Resource Management is enabled (that is, the <code dir=\"ltr\">-XX:+ResourceManagement</code> option is specified).</p>","type":"Advanced Runtime Options"},{"arg":"-XX:SharedArchiveFile=path","comment":"<p>Specifies the path and name of the class data sharing (CDS) archive file</p>","type":"Advanced Runtime Options"},{"arg":"-XX:SharedClassListFile=file_name","comment":"<p>Specifies the text file that contains the names of the class files to store in the class data sharing (CDS) archive. This file contains the full name of one class file per line, except slashes (<code dir=\"ltr\">/</code>) replace dots (<code dir=\"ltr\">.</code>). For example, to specify the classes <code dir=\"ltr\">java.lang.Object</code> and <code dir=\"ltr\">hello.Main</code>, create a text file that contains the following two lines:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\njava/lang/Object\r\nhello/Main\r\n</pre> \n<p>The class files that you specify in this text file should include the classes that are commonly used by the application. They may include any classes from the application, extension, or bootstrap class paths.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+ShowMessageBoxOnError","comment":"<p>Enables displaying of a dialog box when the JVM experiences an irrecoverable error. This prevents the JVM from exiting and keeps the process active so that you can attach a debugger to it to investigate the cause of the error. By default, this option is disabled.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:StartFlightRecording=parameter=value","comment":"<p>Starts a JFR recording for the Java application. This is a commercial feature that works in conjunction with the <code dir=\"ltr\">-XX:+UnlockCommercialFeatures</code> option. This option is equivalent to the <code dir=\"ltr\">JFR.start</code> diagnostic command that starts a recording during runtime. You can set the following parameters when starting a JFR recording:</p> \n<dl> \n <dt>\n  compress={true|false}\n </dt> \n <dd> \n  <p>Specifies whether to compress the JFR recording log file (of type JFR) on the disk using the <code dir=\"ltr\">gzip</code> file compression utility. This parameter is valid only if the <code dir=\"ltr\">filename</code> parameter is specified. By default it is set to <code dir=\"ltr\">false</code> (recording is not compressed). To enable compression, set the parameter to <code dir=\"ltr\">true</code>.</p> \n </dd> \n <dt>\n  defaultrecording={true|false}\n </dt> \n <dd> \n  <p>Specifies whether the recording is a continuous background recording or if it runs for a limited time. By default, this parameter is set to <code dir=\"ltr\">false</code> (recording runs for a limited time). To make the recording run continuously, set the parameter to <code dir=\"ltr\">true</code>.</p> \n </dd> \n <dt>\n  delay=\n  <i>time</i>\n </dt> \n <dd> \n  <p>Specifies the delay between the Java application launch time and the start of the recording. Append <code dir=\"ltr\">s</code> to specify the time in seconds, <code dir=\"ltr\">m</code> for minutes, <code dir=\"ltr\">h</code> for hours, or <code dir=\"ltr\">d</code> for days (for example, specifying <code dir=\"ltr\">10m</code> means 10 minutes). By default, there is no delay, and this parameter is set to 0.</p> \n </dd> \n <dt>\n  dumponexit={true|false}\n </dt> \n <dd> \n  <p>Specifies whether a dump file of JFR data should be generated when the JVM terminates in a controlled manner. By default, this parameter is set to <code dir=\"ltr\">false</code> (dump file on exit is not generated). To enable it, set the parameter to <code dir=\"ltr\">true</code>.</p> \n  <p>The dump file is written to the location defined by the <code dir=\"ltr\">filename</code> parameter.</p> \n  <p>Example:</p> \n  <pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:StartFlightRecording=name=test,filename=D:\\test.jfr,dumponexit=true\r\n</pre>\n </dd> \n <dt>\n  duration=\n  <i>time</i>\n </dt> \n <dd> \n  <p>Specifies the duration of the recording. Append <code dir=\"ltr\">s</code> to specify the time in seconds, <code dir=\"ltr\">m</code> for minutes, <code dir=\"ltr\">h</code> for hours, or <code dir=\"ltr\">d</code> for days (for example, specifying <code dir=\"ltr\">5h</code> means 5 hours). By default, the duration is not limited, and this parameter is set to 0.</p> \n </dd> \n <dt>\n  filename=\n  <i>path</i>\n </dt> \n <dd> \n  <p>Specifies the path and name of the JFR recording log file.</p> \n </dd> \n <dt>\n  name=\n  <i>identifier</i>\n </dt> \n <dd> \n  <p>Specifies the identifier for the JFR recording. By default, it is set to <code dir=\"ltr\">Recording x</code>.</p> \n </dd> \n <dt>\n  maxage=\n  <i>time</i>\n </dt> \n <dd> \n  <p>Specifies the maximum age of disk data to keep for the default recording. Append <code dir=\"ltr\">s</code> to specify the time in seconds, <code dir=\"ltr\">m</code> for minutes, <code dir=\"ltr\">h</code> for hours, or <code dir=\"ltr\">d</code> for days (for example, specifying <code dir=\"ltr\">30s</code> means 30 seconds). By default, the maximum age is set to 15 minutes (<code dir=\"ltr\">15m</code>).</p> \n </dd> \n <dt>\n  maxsize=\n  <i>size</i>\n </dt> \n <dd> \n  <p>Specifies the maximum size (in bytes) of disk data to keep for the default recording. Append <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code>, to specify the size in KB, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to specify the size in MB, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to specify the size in GB. By default, the maximum size of disk data is not limited, and this parameter is set to 0.</p> \n </dd> \n <dt>\n  settings=\n  <i>path</i>\n </dt> \n <dd> \n  <p>Specifies the path and name of the event settings file (of type JFC). By default, the <code dir=\"ltr\">default.jfc</code> file is used, which is located in <code dir=\"ltr\">JAVA_HOME/jre/lib/jfr</code>.</p> \n </dd> \n</dl> \n<p>You can specify values for multiple parameters by separating them with a comma. For example, to save the recording to test.jfr in the current working directory, and instruct JFR to compress the log file, specify the following:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:StartFlightRecording=filename=test.jfr,compress=true\r\n</pre>","type":"Advanced Runtime Options"},{"arg":"-XX:ThreadStackSize=size","comment":"<p>Sets the thread stack size (in bytes). Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. The default value depends on the platform:</p> \n<ul> \n <li> <p>Linux/ARM (32-bit): 320 KB</p> </li> \n <li> <p>Linux/i386 (32-bit): 320 KB</p> </li> \n <li> <p>Linux/x64 (64-bit): 1024 KB</p> </li> \n <li> <p>OS X (64-bit): 1024 KB</p> </li> \n <li> <p>Oracle Solaris/i386 (32-bit): 320 KB</p> </li> \n <li> <p>Oracle Solaris/x64 (64-bit): 1024 KB</p> </li> \n</ul> \n<p>The following examples show how to set the thread stack size to 1024 KB in different units:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:ThreadStackSize=1m\r\n-XX:ThreadStackSize=1024k\r\n-XX:ThreadStackSize=1048576\r\n</pre> \n<p>This option is equivalent to <code dir=\"ltr\">-Xss</code>.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+TraceClassLoading","comment":"<p>Enables tracing of classes as they are loaded. By default, this option is disabled and classes are not traced.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+TraceClassLoadingPreorder","comment":"<p>Enables tracing of all loaded classes in the order in which they are referenced. By default, this option is disabled and classes are not traced.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+TraceClassResolution","comment":"<p>Enables tracing of constant pool resolutions. By default, this option is disabled and constant pool resolutions are not traced.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+TraceClassUnloading","comment":"<p>Enables tracing of classes as they are unloaded. By default, this option is disabled and classes are not traced.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+TraceLoaderConstraints","comment":"<p>Enables tracing of the loader constraints recording. By default, this option is disabled and loader constraints recording is not traced.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+UnlockCommercialFeatures","comment":"<p>Enables the use of commercial features. Commercial features are included with Oracle Java SE Advanced or Oracle Java SE Suite packages, as defined on the <i>Java SE Products</i> page at <code dir=\"ltr\"><a href=\"http://www.oracle.com/technetwork/java/javase/terms/products/index.html\">http://www.oracle.com/technetwork/java/javase/terms/products/index.html</a></code></p> \n<p>By default, this option is disabled and the JVM runs without the commercial features. Once they were enabled for a JVM process, it is not possible to disable their use for that process.</p> \n<p>If this option is not provided, commercial features can still be unlocked in a running JVM by using the appropriate <code dir=\"ltr\">jcmd</code> diagnostic commands.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+UseAltSigs","comment":"<p>Enables the use of alternative signals instead of <code dir=\"ltr\">SIGUSR1</code> and <code dir=\"ltr\">SIGUSR2</code> for JVM internal signals. By default, this option is disabled and alternative signals are not used. This option is equivalent to <code dir=\"ltr\">-Xusealtsigs</code>.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+UseAppCDS","comment":"<p>Enables application class data sharing (AppCDS). To use AppCDS, you must also specify values for the options <code dir=\"ltr\">-XX:SharedClassListFile</code> and <code dir=\"ltr\">-XX:SharedArchiveFile</code> during both CDS dump time (see the option <code dir=\"ltr\">-Xshare:dump</code>) and application run time.</p> \n<p>This is a commercial feature that requires you to also specify the <code dir=\"ltr\">-XX:+UnlockCommercialFeatures</code> option. This is also an experimental feature; it may change in future releases.</p> \n<p>See <a href=\"#app_class_data_sharing\">\"Application Class Data Sharing\"</a>.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:-UseBiasedLocking","comment":"<p>Disables the use of biased locking. Some applications with significant amounts of uncontended synchronization may attain significant speedups with this flag enabled, whereas applications with certain patterns of locking may see slowdowns. For more information about the biased locking technique, see the example in Java Tuning White Paper at <code dir=\"ltr\"><a href=\"http://www.oracle.com/technetwork/java/tuning-139912.html#section4.2.5\">http://www.oracle.com/technetwork/java/tuning-139912.html#section4.2.5</a></code></p> \n<p>By default, this option is enabled.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:-UseCompressedOops","comment":"<p>Disables the use of compressed pointers. By default, this option is enabled, and compressed pointers are used when Java heap sizes are less than 32 GB. When this option is enabled, object references are represented as 32-bit offsets instead of 64-bit pointers, which typically increases performance when running the application with Java heap sizes less than 32 GB. This option works only for 64-bit JVMs.</p> \n<p>It is also possible to use compressed pointers when Java heap sizes are greater than 32GB. See the <code dir=\"ltr\">-XX:ObjectAlignmentInBytes</code> option.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+UseHugeTLBFS","comment":"<p>This option for Linux is the equivalent of specifying <code dir=\"ltr\">-XX:+UseLargePages</code>. This option is disabled by default. This option pre-allocates all large pages up-front, when memory is reserved; consequently the JVM cannot dynamically grow or shrink large pages memory areas; see <code dir=\"ltr\">-XX:UseTransparentHugePages</code> if you want this behavior.</p> \n<p>For more information, see <a href=\"#large_pages\">\"Large Pages\"</a>.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+UseLargePages","comment":"<p>Enables the use of large page memory. By default, this option is disabled and large page memory is not used.</p> \n<p>For more information, see <a href=\"#large_pages\">\"Large Pages\"</a>.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+UseMembar","comment":"<p>Enables issuing of membars on thread state transitions. This option is disabled by default on all platforms except ARM servers, where it is enabled. (It is recommended that you do not disable this option on ARM servers.)</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+UsePerfData","comment":"<p>Enables the <code dir=\"ltr\">perfdata</code> feature. This option is enabled by default to allow JVM monitoring and performance testing. Disabling it suppresses the creation of the <code dir=\"ltr\">hsperfdata_userid</code> directories. To disable the <code dir=\"ltr\">perfdata</code> feature, specify <code dir=\"ltr\">-XX:-UsePerfData</code>.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+UseTransparentHugePages","comment":"<p>On Linux, enables the use of large pages that can dynamically grow or shrink. This option is disabled by default. You may encounter performance problems with transparent huge pages as the OS moves other pages around to create huge pages; this option is made available for experimentation.</p> \n<p>For more information, see <a href=\"#large_pages\">\"Large Pages\"</a>.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+AllowUserSignalHandlers","comment":"<p>Enables installation of signal handlers by the application. By default, this option is disabled and the application is not allowed to install signal handlers.</p>","type":"Advanced Runtime Options"},{"arg":"-XX:+AggressiveOpts","comment":"<p>Enables the use of aggressive performance optimization features, which are expected to become default in upcoming releases. By default, this option is disabled and experimental performance features are not used.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:AllocateInstancePrefetchLines=lines","comment":"<p>Sets the number of lines to prefetch ahead of the instance allocation pointer. By default, the number of lines to prefetch is set to 1:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:AllocateInstancePrefetchLines=1\r\n</pre> \n<p>Only the Java HotSpot Server VM supports this option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:AllocatePrefetchDistance=size","comment":"<p>Sets the size (in bytes) of the prefetch distance for object allocation. Memory about to be written with the value of new objects is prefetched up to this distance starting from the address of the last allocated object. Each Java thread has its own allocation point.</p> \n<p>Negative values denote that prefetch distance is chosen based on the platform. Positive values are bytes to prefetch. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. The default value is set to -1.</p> \n<p>The following example shows how to set the prefetch distance to 1024 bytes:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:AllocatePrefetchDistance=1024\r\n</pre> \n<p>Only the Java HotSpot Server VM supports this option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:AllocatePrefetchInstr=instruction","comment":"<p>Sets the prefetch instruction to prefetch ahead of the allocation pointer. Only the Java HotSpot Server VM supports this option. Possible values are from 0 to 3. The actual instructions behind the values depend on the platform. By default, the prefetch instruction is set to 0:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:AllocatePrefetchInstr=0\r\n</pre> \n<p>Only the Java HotSpot Server VM supports this option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:AllocatePrefetchLines=lines","comment":"<p>Sets the number of cache lines to load after the last object allocation by using the prefetch instructions generated in compiled code. The default value is 1 if the last allocated object was an instance, and 3 if it was an array.</p> \n<p>The following example shows how to set the number of loaded cache lines to 5:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:AllocatePrefetchLines=5\r\n</pre> \n<p>Only the Java HotSpot Server VM supports this option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:AllocatePrefetchStepSize=size","comment":"<p>Sets the step size (in bytes) for sequential prefetch instructions. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. By default, the step size is set to 16 bytes:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:AllocatePrefetchStepSize=16\r\n</pre> \n<p>Only the Java HotSpot Server VM supports this option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:AllocatePrefetchStyle=style","comment":"<p>Sets the generated code style for prefetch instructions. The <i>style</i> argument is an integer from 0 to 3:</p> \n<dl> \n <dt>\n  0\n </dt> \n <dd> \n  <p>Do not generate prefetch instructions.</p> \n </dd> \n <dt>\n  1\n </dt> \n <dd> \n  <p>Execute prefetch instructions after each allocation. This is the default parameter.</p> \n </dd> \n <dt>\n  2\n </dt> \n <dd> \n  <p>Use the thread-local allocation block (TLAB) watermark pointer to determine when prefetch instructions are executed.</p> \n </dd> \n <dt>\n  3\n </dt> \n <dd> \n  <p>Use BIS instruction on SPARC for allocation prefetch.</p> \n </dd> \n</dl> \n<p>Only the Java HotSpot Server VM supports this option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+BackgroundCompilation","comment":"<p>Enables background compilation. This option is enabled by default. To disable background compilation, specify <code dir=\"ltr\">-XX:-BackgroundCompilation</code> (this is equivalent to specifying <code dir=\"ltr\">-Xbatch</code>).</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:CICompilerCount=threads","comment":"<p>Sets the number of compiler threads to use for compilation. By default, the number of threads is set to 2 for the server JVM, to 1 for the client JVM, and it scales to the number of cores if tiered compilation is used. The following example shows how to set the number of threads to 2:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CICompilerCount=2\r\n</pre>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:CodeCacheMinimumFreeSpace=size","comment":"<p>Sets the minimum free space (in bytes) required for compilation. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. When less than the minimum free space remains, compiling stops. By default, this option is set to 500 KB. The following example shows how to set the minimum free space to 1024 MB:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CodeCacheMinimumFreeSpace=1024m\r\n</pre>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:CompileCommand=command,method[,option]","comment":"<p>Specifies a command to perform on a method. For example, to exclude the <code dir=\"ltr\">indexOf()</code> method of the <code dir=\"ltr\">String</code> class from being compiled, use the following:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CompileCommand=exclude,java/lang/String.indexOf\r\n</pre> \n<p>Note that the full class name is specified, including all packages and subpackages separated by a slash (<code dir=\"ltr\">/</code>). For easier cut and paste operations, it is also possible to use the method name format produced by the <code dir=\"ltr\">-XX:+PrintCompilation</code> and <code dir=\"ltr\">-XX:+LogCompilation</code> options:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CompileCommand=exclude,java.lang.String::indexOf\r\n</pre> \n<p>If the method is specified without the signature, the command will be applied to all methods with the specified name. However, you can also specify the signature of the method in the class file format. In this case, you should enclose the arguments in quotation marks, because otherwise the shell treats the semicolon as command end. For example, if you want to exclude only the <code dir=\"ltr\">indexOf(String)</code> method of the <code dir=\"ltr\">String</code> class from being compiled, use the following:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CompileCommand=\"exclude,java/lang/String.indexOf,(Ljava/lang/String;)I\"\r\n</pre> \n<p>You can also use the asterisk (*) as a wildcard for class and method names. For example, to exclude all <code dir=\"ltr\">indexOf()</code> methods in all classes from being compiled, use the following:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CompileCommand=exclude,*.indexOf\r\n</pre> \n<p>The commas and periods are aliases for spaces, making it easier to pass compiler commands through a shell. You can pass arguments to <code dir=\"ltr\">-XX:CompileCommand</code> using spaces as separators by enclosing the argument in quotation marks:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CompileCommand=\"exclude java/lang/String indexOf\"\r\n</pre> \n<p>Note that after parsing the commands passed on the command line using the <code dir=\"ltr\">-XX:CompileCommand</code> options, the JIT compiler then reads commands from the <code dir=\"ltr\">.hotspot_compiler</code> file. You can add commands to this file or specify a different file using the <code dir=\"ltr\">-XX:CompileCommandFile</code> option.</p> \n<p>To add several commands, either specify the <code dir=\"ltr\">-XX:CompileCommand</code> option multiple times, or separate each argument with the newline separator (<code dir=\"ltr\">\\n</code>). The following commands are available:</p> \n<dl> \n <dt>\n  break\n </dt> \n <dd> \n  <p>Set a breakpoint when debugging the JVM to stop at the beginning of compilation of the specified method.</p> \n </dd> \n <dt>\n  compileonly\n </dt> \n <dd> \n  <p>Exclude all methods from compilation except for the specified method. As an alternative, you can use the <code dir=\"ltr\">-XX:CompileOnly</code> option, which allows to specify several methods.</p> \n </dd> \n <dt>\n  dontinline\n </dt> \n <dd> \n  <p>Prevent inlining of the specified method.</p> \n </dd> \n <dt>\n  exclude\n </dt> \n <dd> \n  <p>Exclude the specified method from compilation.</p> \n </dd> \n <dt>\n  help\n </dt> \n <dd> \n  <p>Print a help message for the <code dir=\"ltr\">-XX:CompileCommand</code> option.</p> \n </dd> \n <dt>\n  inline\n </dt> \n <dd> \n  <p>Attempt to inline the specified method.</p> \n </dd> \n <dt>\n  log\n </dt> \n <dd> \n  <p>Exclude compilation logging (with the <code dir=\"ltr\">-XX:+LogCompilation</code> option) for all methods except for the specified method. By default, logging is performed for all compiled methods.</p> \n </dd> \n <dt>\n  option\n </dt> \n <dd> \n  <p>This command can be used to pass a JIT compilation option to the specified method in place of the last argument (<i>option</i>). The compilation option is set at the end, after the method name. For example, to enable the <code dir=\"ltr\">BlockLayoutByFrequency</code> option for the <code dir=\"ltr\">append()</code> method of the <code dir=\"ltr\">StringBuffer</code> class, use the following:</p> \n  <pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CompileCommand=option,java/lang/StringBuffer.append,BlockLayoutByFrequency\r\n</pre> \n  <p>You can specify multiple compilation options, separated by commas or spaces.</p> \n </dd> \n <dt>\n  print\n </dt> \n <dd> \n  <p>Print generated assembler code after compilation of the specified method.</p> \n </dd> \n <dt>\n  quiet\n </dt> \n <dd> \n  <p>Do not print the compile commands. By default, the commands that you specify with the -<code dir=\"ltr\">XX:CompileCommand</code> option are printed; for example, if you exclude from compilation the <code dir=\"ltr\">indexOf()</code> method of the <code dir=\"ltr\">String</code> class, then the following will be printed to standard output:</p> \n  <pre dir=\"ltr\" xml:space=\"preserve\">\r\nCompilerOracle: exclude java/lang/String.indexOf\r\n</pre> \n  <p>You can suppress this by specifying the <code dir=\"ltr\">-XX:CompileCommand=quiet</code> option before other <code dir=\"ltr\">-XX:CompileCommand</code> options.</p> \n </dd> \n</dl>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:CompileCommandFile=filename","comment":"<p>Sets the file from which JIT compiler commands are read. By default, the <code dir=\"ltr\">.hotspot_compiler</code> file is used to store commands performed by the JIT compiler.</p> \n<p>Each line in the command file represents a command, a class name, and a method name for which the command is used. For example, this line prints assembly code for the <code dir=\"ltr\">toString()</code> method of the <code dir=\"ltr\">String</code> class:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\nprint java/lang/String toString\r\n</pre> \n<p>For more information about specifying the commands for the JIT compiler to perform on methods, see the <code dir=\"ltr\">-XX:CompileCommand</code> option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:CompileOnly=methods","comment":"<p>Sets the list of methods (separated by commas) to which compilation should be restricted. Only the specified methods will be compiled. Specify each method with the full class name (including the packages and subpackages). For example, to compile only the <code dir=\"ltr\">length()</code> method of the <code dir=\"ltr\">String</code> class and the <code dir=\"ltr\">size()</code> method of the <code dir=\"ltr\">List</code> class, use the following:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CompileOnly=java/lang/String.length,java/util/List.size\r\n</pre> \n<p>Note that the full class name is specified, including all packages and subpackages separated by a slash (<code dir=\"ltr\">/</code>). For easier cut and paste operations, it is also possible to use the method name format produced by the <code dir=\"ltr\">-XX:+PrintCompilation</code> and <code dir=\"ltr\">-XX:+LogCompilation</code> options:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CompileOnly=java.lang.String::length,java.util.List::size\r\n</pre> \n<p>Although wildcards are not supported, you can specify only the class or package name to compile all methods in that class or package, as well as specify just the method to compile methods with this name in any class:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CompileOnly=java/lang/String\r\n-XX:CompileOnly=java/lang\r\n-XX:CompileOnly=.length\r\n</pre>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:CompileThreshold=invocations","comment":"<p>Sets the number of interpreted method invocations before compilation. By default, in the server JVM, the JIT compiler performs 10,000 interpreted method invocations to gather information for efficient compilation. For the client JVM, the default setting is 1,500 invocations. This option is ignored when tiered compilation is enabled; see the option <code dir=\"ltr\">-XX:+TieredCompilation</code>. The following example shows how to set the number of interpreted method invocations to 5,000:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CompileThreshold=5000\r\n</pre> \n<p>You can completely disable interpretation of Java methods before compilation by specifying the <code dir=\"ltr\">-Xcomp</code> option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+DoEscapeAnalysis","comment":"<p>Enables the use of escape analysis. This option is enabled by default. To disable the use of escape analysis, specify <code dir=\"ltr\">-XX:-DoEscapeAnalysis</code>. Only the Java HotSpot Server VM supports this option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:InitialCodeCacheSize=size","comment":"<p>Sets the initial code cache size (in bytes). Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. The default value is set to 500 KB. The initial code cache size should be not less than the system's minimal memory page size. The following example shows how to set the initial code cache size to 32 KB:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:InitialCodeCacheSize=32k\r\n</pre>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+Inline","comment":"<p>Enables method inlining. This option is enabled by default to increase performance. To disable method inlining, specify <code dir=\"ltr\">-XX:-Inline</code>.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:InlineSmallCode=size","comment":"<p>Sets the maximum code size (in bytes) for compiled methods that should be inlined. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. Only compiled methods with the size smaller than the specified size will be inlined. By default, the maximum code size is set to 1000 bytes:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:InlineSmallCode=1000\r\n</pre>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+LogCompilation","comment":"<p>Enables logging of compilation activity to a file named <code dir=\"ltr\">hotspot.log</code> in the current working directory. You can specify a different log file path and name using the <code dir=\"ltr\">-XX:LogFile</code> option.</p> \n<p>By default, this option is disabled and compilation activity is not logged. The <code dir=\"ltr\">-XX:+LogCompilation</code> option has to be used together with the <code dir=\"ltr\">-XX:UnlockDiagnosticVMOptions</code> option that unlocks diagnostic JVM options.</p> \n<p>You can enable verbose diagnostic output with a message printed to the console every time a method is compiled by using the <code dir=\"ltr\">-XX:+PrintCompilation</code> option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:MaxInlineSize=size","comment":"<p>Sets the maximum bytecode size (in bytes) of a method to be inlined. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. By default, the maximum bytecode size is set to 35 bytes:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:MaxInlineSize=35\r\n</pre>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:MaxNodeLimit=nodes","comment":"<p>Sets the maximum number of nodes to be used during single method compilation. By default, the maximum number of nodes is set to 65,000:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:MaxNodeLimit=65000\r\n</pre>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:MaxTrivialSize=size","comment":"<p>Sets the maximum bytecode size (in bytes) of a trivial method to be inlined. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. By default, the maximum bytecode size of a trivial method is set to 6 bytes:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:MaxTrivialSize=6\r\n</pre>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+OptimizeStringConcat","comment":"<p>Enables the optimization of <code dir=\"ltr\">String</code> concatenation operations. This option is enabled by default. To disable the optimization of <code dir=\"ltr\">String</code> concatenation operations, specify <code dir=\"ltr\">-XX:-OptimizeStringConcat</code>. Only the Java HotSpot Server VM supports this option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+PrintAssembly","comment":"<p>Enables printing of assembly code for bytecoded and native methods by using the external <code dir=\"ltr\">disassembler.so</code> library. This enables you to see the generated code, which may help you to diagnose performance issues.</p> \n<p>By default, this option is disabled and assembly code is not printed. The <code dir=\"ltr\">-XX:+PrintAssembly</code> option has to be used together with the <code dir=\"ltr\">-XX:UnlockDiagnosticVMOptions</code> option that unlocks diagnostic JVM options.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+PrintCompilation","comment":"<p>Enables verbose diagnostic output from the JVM by printing a message to the console every time a method is compiled. This enables you to see which methods actually get compiled. By default, this option is disabled and diagnostic output is not printed.</p> \n<p>You can also log compilation activity to a file by using the <code dir=\"ltr\">-XX:+LogCompilation</code> option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+PrintInlining","comment":"<p>Enables printing of inlining decisions. This enables you to see which methods are getting inlined.</p> \n<p>By default, this option is disabled and inlining information is not printed. The <code dir=\"ltr\">-XX:+PrintInlining</code> option has to be used together with the <code dir=\"ltr\">-XX:+UnlockDiagnosticVMOptions</code> option that unlocks diagnostic JVM options.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:ReservedCodeCacheSize=size","comment":"<p>Sets the maximum code cache size (in bytes) for JIT-compiled code. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. The default maximum code cache size is 240 MB; if you disable tiered compilation with the option <code dir=\"ltr\">-XX:-TieredCompilation</code>, then the default size is 48 MB. This option has a limit of 2 GB; otherwise, an error is generated. The maximum code cache size should not be less than the initial code cache size; see the option <code dir=\"ltr\">-XX:InitialCodeCacheSize</code>. This option is equivalent to <code dir=\"ltr\">-Xmaxjitcodesize</code>.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:RTMAbortRatio=abort_ratio","comment":"<p>The RTM abort ratio is specified as a percentage (%) of all executed RTM transactions. If a number of aborted transactions becomes greater than this ratio, then the compiled code will be deoptimized. This ratio is used when the <code dir=\"ltr\">-XX:+UseRTMDeopt</code> option is enabled. The default value of this option is 50. This means that the compiled code will be deoptimized if 50% of all transactions are aborted.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:RTMRetryCount=number_of_retries","comment":"<p>RTM locking code will be retried, when it is aborted or busy, the number of times specified by this option before falling back to the normal locking mechanism. The default value for this option is 5. The <code dir=\"ltr\">-XX:UseRTMLocking</code> option must be enabled.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:-TieredCompilation","comment":"<p>Disables the use of tiered compilation. By default, this option is enabled. Only the Java HotSpot Server VM supports this option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+UseAES","comment":"<p>Enables hardware-based AES intrinsics for Intel, AMD, and SPARC hardware. Intel Westmere (2010 and newer), AMD Bulldozer (2011 and newer), and SPARC (T4 and newer) are the supported hardware. UseAES is used in conjunction with UseAESIntrinsics.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+UseAESIntrinsics","comment":"<p>UseAES and UseAESIntrinsics flags are enabled by default and are supported only for Java HotSpot Server VM 32-bit and 64-bit. To disable hardware-based AES intrinsics, specify <code dir=\"ltr\">-XX:-UseAES -XX:-UseAESIntrinsics</code>. For example, to enable hardware AES, use the following flags:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:+UseAES -XX:+UseAESIntrinsics\r\n</pre> \n<p>To support UseAES and UseAESIntrinsics flags for 32-bit and 64-bit use <code dir=\"ltr\">-server</code> option to choose Java HotSpot Server VM. These flags are not supported on Client VM.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+UseCodeCacheFlushing","comment":"<p>Enables flushing of the code cache before shutting down the compiler. This option is enabled by default. To disable flushing of the code cache before shutting down the compiler, specify <code dir=\"ltr\">-XX:-UseCodeCacheFlushing</code>.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+UseCondCardMark","comment":"<p>Enables checking of whether the card is already marked before updating the card table. This option is disabled by default and should only be used on machines with multiple sockets, where it will increase performance of Java applications that rely heavily on concurrent operations. Only the Java HotSpot Server VM supports this option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+UseRTMDeopt","comment":"<p>Auto-tunes RTM locking depending on the abort ratio. This ratio is specified by <code dir=\"ltr\">-XX:RTMAbortRatio</code> option. If the number of aborted transactions exceeds the abort ratio, then the method containing the lock will be deoptimized and recompiled with all locks as normal locks. This option is disabled by default. The <code dir=\"ltr\">-XX:+UseRTMLocking</code> option must be enabled.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+UseRTMLocking","comment":"<p>Generate Restricted Transactional Memory (RTM) locking code for all inflated locks, with the normal locking mechanism as the fallback handler. This option is disabled by default. Options related to RTM are only available for the Java HotSpot Server VM on x86 CPUs that support Transactional Synchronization Extensions (TSX).</p> \n<p>RTM is part of Intel's TSX, which is an x86 instruction set extension and facilitates the creation of multithreaded applications. RTM introduces the new instructions <code dir=\"ltr\">XBEGIN</code>, <code dir=\"ltr\">XABORT</code>, <code dir=\"ltr\">XEND</code>, and <code dir=\"ltr\">XTEST</code>. The <code dir=\"ltr\">XBEGIN</code> and <code dir=\"ltr\">XEND</code> instructions enclose a set of instructions to run as a transaction. If no conflict is found when running the transaction, the memory and register modifications are committed together at the <code dir=\"ltr\">XEND</code> instruction. The <code dir=\"ltr\">XABORT</code> instruction can be used to explicitly abort a transaction and the <code dir=\"ltr\">XEND</code> instruction to check if a set of instructions are being run in a transaction.</p> \n<p>A lock on a transaction is inflated when another thread tries to access the same transaction, thereby blocking the thread that did not originally request access to the transaction. RTM requires that a fallback set of operations be specified in case a transaction aborts or fails. An RTM lock is a lock that has been delegated to the TSX's system.</p> \n<p>RTM improves performance for highly contended locks with low conflict in a critical region (which is code that must not be accessed by more than one thread concurrently). RTM also improves the performance of coarse-grain locking, which typically does not perform well in multithreaded applications. (Coarse-grain locking is the strategy of holding locks for long periods to minimize the overhead of taking and releasing locks, while fine-grained locking is the strategy of trying to achieve maximum parallelism by locking only when necessary and unlocking as soon as possible.) Also, for lightly contended locks that are used by different threads, RTM can reduce false cache line sharing, also known as cache line ping-pong. This occurs when multiple threads from different processors are accessing different resources, but the resources share the same cache line. As a result, the processors repeatedly invalidate the cache lines of other processors, which forces them to read from main memory instead of their cache.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+UseSHA","comment":"<p>Enables hardware-based intrinsics for SHA crypto hash functions for SPARC hardware. <code dir=\"ltr\">UseSHA</code> is used in conjunction with the <code dir=\"ltr\">UseSHA1Intrinsics</code>, <code dir=\"ltr\">UseSHA256Intrinsics</code>, and <code dir=\"ltr\">UseSHA512Intrinsics</code> options.</p> \n<p>The <code dir=\"ltr\">UseSHA</code> and <code dir=\"ltr\">UseSHA*Intrinsics</code> flags are enabled by default, and are supported only for Java HotSpot Server VM 64-bit on SPARC T4 and newer.</p> \n<p>This feature is only applicable when using the <code dir=\"ltr\">sun.security.provider.Sun</code> provider for SHA operations.</p> \n<p>To disable all hardware-based SHA intrinsics, specify <code dir=\"ltr\">-XX:-UseSHA</code>. To disable only a particular SHA intrinsic, use the appropriate corresponding option. For example: <code dir=\"ltr\">-XX:-UseSHA256Intrinsics</code>.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+UseSHA1Intrinsics","comment":"<p>Enables intrinsics for SHA-1 crypto hash function.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+UseSHA256Intrinsics","comment":"<p>Enables intrinsics for SHA-224 and SHA-256 crypto hash functions.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+UseSHA512Intrinsics","comment":"<p>Enables intrinsics for SHA-384 and SHA-512 crypto hash functions.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+UseSuperWord","comment":"<p>Enables the transformation of scalar operations into superword operations. This option is enabled by default. To disable the transformation of scalar operations into superword operations, specify <code dir=\"ltr\">-XX:-UseSuperWord</code>. Only the Java HotSpot Server VM supports this option.</p>","type":"Advanced JIT Compiler Options"},{"arg":"-XX:+ExtendedDTraceProbes","comment":"<p>Enables additional <code dir=\"ltr\">dtrace</code> tool probes that impact the performance. By default, this option is disabled and <code dir=\"ltr\">dtrace</code> performs only standard probes.</p>","type":"Advanced Serviceability Options"},{"arg":"-XX:+HeapDumpOnOutOfMemory","comment":"<p>Enables the dumping of the Java heap to a file in the current directory by using the heap profiler (HPROF) when a <code dir=\"ltr\">java.lang.OutOfMemoryError</code> exception is thrown. You can explicitly set the heap dump file path and name using the <code dir=\"ltr\">-XX:HeapDumpPath</code> option. By default, this option is disabled and the heap is not dumped when an <code dir=\"ltr\">OutOfMemoryError</code> exception is thrown.</p>","type":"Advanced Serviceability Options"},{"arg":"-XX:HeapDumpPath=path","comment":"<p>Sets the path and file name for writing the heap dump provided by the heap profiler (HPROF) when the <code dir=\"ltr\">-XX:+HeapDumpOnOutOfMemoryError</code> option is set. By default, the file is created in the current working directory, and it is named <code dir=\"ltr\">java_pid</code><i>pid</i><code dir=\"ltr\">.hprof</code> where <i>pid</i> is the identifier of the process that caused the error. The following example shows how to set the default file explicitly (<code dir=\"ltr\">%p</code> represents the current process identificator):</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:HeapDumpPath=./java_pid%p.hprof\r\n</pre> \n<p>The following example shows how to set the heap dump file to <code dir=\"ltr\">/var/log/java/java_heapdump.hprof</code>:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:HeapDumpPath=/var/log/java/java_heapdump.hprof\r\n</pre>","type":"Advanced Serviceability Options"},{"arg":"-XX:LogFile=path","comment":"<p>Sets the path and file name where log data is written. By default, the file is created in the current working directory, and it is named <code dir=\"ltr\">hotspot.log</code>.</p> \n<p>The following example shows how to set the log file to <code dir=\"ltr\">/var/log/java/hotspot.log</code>:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:LogFile=/var/log/java/hotspot.log\r\n</pre>","type":"Advanced Serviceability Options"},{"arg":"-XX:+PrintClassHistogram","comment":"<p>Enables printing of a class instance histogram after a <code dir=\"ltr\">Control+C</code> event (<code dir=\"ltr\">SIGTERM</code>). By default, this option is disabled.</p> \n<p>Setting this option is equivalent to running the <code dir=\"ltr\">jmap -histo</code> command, or the <code dir=\"ltr\">jcmd</code> <i>pid</i> <code dir=\"ltr\">GC.class_histogram</code> command, where <i>pid</i> is the current Java process identifier.</p>","type":"Advanced Serviceability Options"},{"arg":"-XX:+PrintConcurrentLocks","comment":"<p>Enables printing of <code dir=\"ltr\">java.util.concurrent</code> locks after a <code dir=\"ltr\">Control+C</code> event (<code dir=\"ltr\">SIGTERM</code>). By default, this option is disabled.</p> \n<p>Setting this option is equivalent to running the <code dir=\"ltr\">jstack -l</code> command or the <code dir=\"ltr\">jcmd</code> <i>pid</i> <code dir=\"ltr\">Thread.print -l</code> command, where <i>pid</i> is the current Java process identifier.</p>","type":"Advanced Serviceability Options"},{"arg":"-XX:+UnlockDiagnosticVMOptions","comment":"<p>Unlocks the options intended for diagnosing the JVM. By default, this option is disabled and diagnostic options are not available.</p>","type":"Advanced Serviceability Options"},{"arg":"-XX:+AggressiveHeap","comment":"<p>Enables Java heap optimization. This sets various parameters to be optimal for long-running jobs with intensive memory allocation, based on the configuration of the computer (RAM and CPU). By default, the option is disabled and the heap is not optimized.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+AlwaysPreTouch","comment":"<p>Enables touching of every page on the Java heap during JVM initialization. This gets all pages into the memory before entering the <code dir=\"ltr\">main()</code> method. The option can be used in testing to simulate a long-running system with all virtual memory mapped to physical memory. By default, this option is disabled and all pages are committed as JVM heap space fills.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+CMSClassUnloadingEnabled","comment":"<p>Enables class unloading when using the concurrent mark-sweep (CMS) garbage collector. This option is enabled by default. To disable class unloading for the CMS garbage collector, specify <code dir=\"ltr\">-XX:-CMSClassUnloadingEnabled</code>.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:CMSExpAvgFactor=percent","comment":"<p>Sets the percentage of time (0 to 100) used to weight the current sample when computing exponential averages for the concurrent collection statistics. By default, the exponential averages factor is set to 25%. The following example shows how to set the factor to 15%:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CMSExpAvgFactor=15\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:CMSInitiatingOccupancyFraction=percent","comment":"<p>Sets the percentage of the old generation occupancy (0 to 100) at which to start a CMS collection cycle. The default value is set to -1. Any negative value (including the default) implies that <code dir=\"ltr\">-XX:CMSTriggerRatio</code> is used to define the value of the initiating occupancy fraction.</p> \n<p>The following example shows how to set the occupancy fraction to 20%:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CMSInitiatingOccupancyFraction=20\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+CMSScavengeBeforeRemark","comment":"<p>Enables scavenging attempts before the CMS remark step. By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:CMSTriggerRatio=percent","comment":"<p>Sets the percentage (0 to 100) of the value specified by <code dir=\"ltr\">-XX:MinHeapFreeRatio</code> that is allocated before a CMS collection cycle commences. The default value is set to 80%.</p> \n<p>The following example shows how to set the occupancy fraction to 75%:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:CMSTriggerRatio=75\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:ConcGCThreads=threads","comment":"<p>Sets the number of threads used for concurrent GC. The default value depends on the number of CPUs available to the JVM.</p> \n<p>For example, to set the number of threads for concurrent GC to 2, specify the following option:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:ConcGCThreads=2\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+DisableExplicitGC","comment":"<p>Enables the option that disables processing of calls to <code dir=\"ltr\">System.gc()</code>. This option is disabled by default, meaning that calls to <code dir=\"ltr\">System.gc()</code> are processed. If processing of calls to <code dir=\"ltr\">System.gc()</code> is disabled, the JVM still performs GC when necessary.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+ExplicitGCInvokesConcurrent","comment":"<p>Enables invoking of concurrent GC by using the <code dir=\"ltr\">System.gc()</code> request. This option is disabled by default and can be enabled only together with the <code dir=\"ltr\">-XX:+UseConcMarkSweepGC</code> option.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses","comment":"<p>Enables invoking of concurrent GC by using the <code dir=\"ltr\">System.gc()</code> request and unloading of classes during the concurrent GC cycle. This option is disabled by default and can be enabled only together with the <code dir=\"ltr\">-XX:+UseConcMarkSweepGC</code> option.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:G1HeapRegionSize=size","comment":"<p>Sets the size of the regions into which the Java heap is subdivided when using the garbage-first (G1) collector. The value can be between 1 MB and 32 MB. The default region size is determined ergonomically based on the heap size.</p> \n<p>The following example shows how to set the size of the subdivisions to 16 MB:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:G1HeapRegionSize=16m\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+G1PrintHeapRegions","comment":"<p>Enables the printing of information about which regions are allocated and which are reclaimed by the G1 collector. By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:G1ReservePercent=percent","comment":"<p>Sets the percentage of the heap (0 to 50) that is reserved as a false ceiling to reduce the possibility of promotion failure for the G1 collector. By default, this option is set to 10%.</p> \n<p>The following example shows how to set the reserved heap to 20%:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:G1ReservePercent=20\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:InitialHeapSize=size","comment":"<p>Sets the initial size (in bytes) of the memory allocation pool. This value must be either 0, or a multiple of 1024 and greater than 1 MB. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. The default value is chosen at runtime based on system configuration. See the section \"Ergonomics\" in <i>Java SE HotSpot Virtual Machine Garbage Collection Tuning Guide</i> at <code dir=\"ltr\"><a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html\">http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html</a></code>.</p> \n<p>The following examples show how to set the size of allocated memory to 6 MB using various units:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:InitialHeapSize=6291456\r\n-XX:InitialHeapSize=6144k\r\n-XX:InitialHeapSize=6m\r\n</pre> \n<p>If you set this option to 0, then the initial size will be set as the sum of the sizes allocated for the old generation and the young generation. The size of the heap for the young generation can be set using the <code dir=\"ltr\">-XX:NewSize</code> option.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:InitialSurvivorRatio=ratio","comment":"<p>Sets the initial survivor space ratio used by the throughput garbage collector (which is enabled by the <code dir=\"ltr\">-XX:+UseParallelGC</code> and/or -<code dir=\"ltr\">XX:+UseParallelOldGC</code> options). Adaptive sizing is enabled by default with the throughput garbage collector by using the <code dir=\"ltr\">-XX:+UseParallelGC</code> and <code dir=\"ltr\">-XX:+UseParallelOldGC</code> options, and survivor space is resized according to the application behavior, starting with the initial value. If adaptive sizing is disabled (using the <code dir=\"ltr\">-XX:-UseAdaptiveSizePolicy</code> option), then the <code dir=\"ltr\">-XX:SurvivorRatio</code> option should be used to set the size of the survivor space for the entire execution of the application.</p> \n<p>The following formula can be used to calculate the initial size of survivor space (S) based on the size of the young generation (Y), and the initial survivor space ratio (R):</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\nS=Y/(R+2)\r\n</pre> \n<p>The 2 in the equation denotes two survivor spaces. The larger the value specified as the initial survivor space ratio, the smaller the initial survivor space size.</p> \n<p>By default, the initial survivor space ratio is set to 8. If the default value for the young generation space size is used (2 MB), the initial size of the survivor space will be 0.2 MB.</p> \n<p>The following example shows how to set the initial survivor space ratio to 4:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:InitialSurvivorRatio=4\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:InitiatingHeapOccupancyPercent=percent","comment":"<p>Sets the percentage of the heap occupancy (0 to 100) at which to start a concurrent GC cycle. It is used by garbage collectors that trigger a concurrent GC cycle based on the occupancy of the entire heap, not just one of the generations (for example, the G1 garbage collector).</p> \n<p>By default, the initiating value is set to 45%. A value of 0 implies nonstop GC cycles. The following example shows how to set the initiating heap occupancy to 75%:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:InitiatingHeapOccupancyPercent=75\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:MaxGCPauseMillis=time","comment":"<p>Sets a target for the maximum GC pause time (in milliseconds). This is a soft goal, and the JVM will make its best effort to achieve it. By default, there is no maximum pause time value.</p> \n<p>The following example shows how to set the maximum target pause time to 500 ms:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:MaxGCPauseMillis=500\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:MaxHeapSize=size","comment":"<p>Sets the maximum size (in byes) of the memory allocation pool. This value must be a multiple of 1024 and greater than 2 MB. Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. The default value is chosen at runtime based on system configuration. For server deployments, <code dir=\"ltr\">-XX:InitialHeapSize</code> and <code dir=\"ltr\">-XX:MaxHeapSize</code> are often set to the same value. See the section \"Ergonomics\" in <i>Java SE HotSpot Virtual Machine Garbage Collection Tuning Guide</i> at <code dir=\"ltr\"><a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html\">http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html</a></code>.</p> \n<p>The following examples show how to set the maximum allowed size of allocated memory to 80 MB using various units:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:MaxHeapSize=83886080\r\n-XX:MaxHeapSize=81920k\r\n-XX:MaxHeapSize=80m\r\n</pre> \n<p>On Oracle Solaris 7 and Oracle Solaris 8 SPARC platforms, the upper limit for this value is approximately 4,000 MB minus overhead amounts. On Oracle Solaris 2.6 and x86 platforms, the upper limit is approximately 2,000 MB minus overhead amounts. On Linux platforms, the upper limit is approximately 2,000 MB minus overhead amounts.</p> \n<p>The <code dir=\"ltr\">-XX:MaxHeapSize</code> option is equivalent to <code dir=\"ltr\">-Xmx</code>.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:MaxHeapFreeRatio=percent","comment":"<p>Sets the maximum allowed percentage of free heap space (0 to 100) after a GC event. If free heap space expands above this value, then the heap will be shrunk. By default, this value is set to 70%.</p> \n<p>The following example shows how to set the maximum free heap ratio to 75%:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:MaxHeapFreeRatio=75\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:MaxMetaspaceSize=size","comment":"<p>Sets the maximum amount of native memory that can be allocated for class metadata. By default, the size is not limited. The amount of metadata for an application depends on the application itself, other running applications, and the amount of memory available on the system.</p> \n<p>The following example shows how to set the maximum class metadata size to 256 MB:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:MaxMetaspaceSize=256m\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:MaxNewSize=size","comment":"<p>Sets the maximum size (in bytes) of the heap for the young generation (nursery). The default value is set ergonomically.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:MaxTenuringThreshold=threshold","comment":"<p>Sets the maximum tenuring threshold for use in adaptive GC sizing. The largest value is 15. The default value is 15 for the parallel (throughput) collector, and 6 for the CMS collector.</p> \n<p>The following example shows how to set the maximum tenuring threshold to 10:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:MaxTenuringThreshold=10\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:MetaspaceSize=size","comment":"<p>Sets the size of the allocated class metadata space that will trigger a garbage collection the first time it is exceeded. This threshold for a garbage collection is increased or decreased depending on the amount of metadata used. The default size depends on the platform.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:MinHeapFreeRatio=percent","comment":"<p>Sets the minimum allowed percentage of free heap space (0 to 100) after a GC event. If free heap space falls below this value, then the heap will be expanded. By default, this value is set to 40%.</p> \n<p>The following example shows how to set the minimum free heap ratio to 25%:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:MinHeapFreeRatio=25\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:NewRatio=ratio","comment":"<p>Sets the ratio between young and old generation sizes. By default, this option is set to 2. The following example shows how to set the young/old ratio to 1:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:NewRatio=1\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:NewSize=size","comment":"<p>Sets the initial size (in bytes) of the heap for the young generation (nursery). Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes.</p> \n<p>The young generation region of the heap is used for new objects. GC is performed in this region more often than in other regions. If the size for the young generation is too low, then a large number of minor GCs will be performed. If the size is too high, then only full GCs will be performed, which can take a long time to complete. Oracle recommends that you keep the size for the young generation between a half and a quarter of the overall heap size.</p> \n<p>The following examples show how to set the initial size of young generation to 256 MB using various units:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:NewSize=256m\r\n-XX:NewSize=262144k\r\n-XX:NewSize=268435456\r\n</pre> \n<p>The <code dir=\"ltr\">-XX:NewSize</code> option is equivalent to <code dir=\"ltr\">-Xmn</code>.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:ParallelGCThreads=threads","comment":"<p>Sets the number of threads used for parallel garbage collection in the young and old generations. The default value depends on the number of CPUs available to the JVM.</p> \n<p>For example, to set the number of threads for parallel GC to 2, specify the following option:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:ParallelGCThreads=2\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+ParallelRefProcEnabled","comment":"<p>Enables parallel reference processing. By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+PrintAdaptiveSizePolicy","comment":"<p>Enables printing of information about adaptive generation sizing. By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+PrintGC","comment":"<p>Enables printing of messages at every GC. By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+PrintGCApplicationConcurrentTime","comment":"<p>Enables printing of how much time elapsed since the last pause (for example, a GC pause). By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+PrintGCApplicationStoppedTime","comment":"<p>Enables printing of how much time the pause (for example, a GC pause) lasted. By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+PrintGCDateStamps","comment":"<p>Enables printing of a date stamp at every GC. By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+PrintGCDetails","comment":"<p>Enables printing of detailed messages at every GC. By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+PrintGCTaskTimeStamps","comment":"<p>Enables printing of time stamps for every individual GC worker thread task. By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+PrintGCTimeStamps","comment":"<p>Enables printing of time stamps at every GC. By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+PrintStringDeduplicationStatistics","comment":"<p>Prints detailed deduplication statistics. By default, this option is disabled. See the <code dir=\"ltr\">-XX:+UseStringDeduplication</code> option.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+PrintTenuringDistribution","comment":"<p>Enables printing of tenuring age information. The following is an example of the output:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\nDesired survivor size 48286924 bytes, new threshold 10 (max 10)\r\n- age 1: 28992024 bytes, 28992024 total\r\n- age 2: 1366864 bytes, 30358888 total\r\n- age 3: 1425912 bytes, 31784800 total\r\n...\r\n</pre> \n<p>Age 1 objects are the youngest survivors (they were created after the previous scavenge, survived the latest scavenge, and moved from eden to survivor space). Age 2 objects have survived two scavenges (during the second scavenge they were copied from one survivor space to the next). And so on.</p> \n<p>In the preceding example, 28 992 024 bytes survived one scavenge and were copied from eden to survivor space, 1 366 864 bytes are occupied by age 2 objects, etc. The third value in each row is the cumulative size of objects of age n or less.</p> \n<p>By default, this option is disabled.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+ScavengeBeforeFullGC","comment":"<p>Enables GC of the young generation before each full GC. This option is enabled by default. Oracle recommends that you <i>do not</i> disable it, because scavenging the young generation before a full GC can reduce the number of objects reachable from the old generation space into the young generation space. To disable GC of the young generation before each full GC, specify <code dir=\"ltr\">-XX:-ScavengeBeforeFullGC</code>.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:SoftRefLRUPolicyMSPerMB=time","comment":"<p>Sets the amount of time (in milliseconds) a softly reachable object is kept active on the heap after the last time it was referenced. The default value is one second of lifetime per free megabyte in the heap. The <code dir=\"ltr\">-XX:SoftRefLRUPolicyMSPerMB</code> option accepts integer values representing milliseconds per one megabyte of the current heap size (for Java HotSpot Client VM) or the maximum possible heap size (for Java HotSpot Server VM). This difference means that the Client VM tends to flush soft references rather than grow the heap, whereas the Server VM tends to grow the heap rather than flush soft references. In the latter case, the value of the <code dir=\"ltr\">-Xmx</code> option has a significant effect on how quickly soft references are garbage collected.</p> \n<p>The following example shows how to set the value to 2.5 seconds:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:SoftRefLRUPolicyMSPerMB=2500\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:StringDeduplicationAgeThreshold=threshold","comment":"<p><code dir=\"ltr\">String</code> objects reaching the specified age are considered candidates for deduplication. An object's age is a measure of how many times it has survived garbage collection. This is sometimes referred to as tenuring; see the <code dir=\"ltr\">-XX:+PrintTenuringDistribution</code> option. Note that <code dir=\"ltr\">String</code> objects that are promoted to an old heap region before this age has been reached are always considered candidates for deduplication. The default value for this option is <code dir=\"ltr\">3</code>. See the <code dir=\"ltr\">-XX:+UseStringDeduplication</code> option.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:SurvivorRatio=ratio","comment":"<p>Sets the ratio between eden space size and survivor space size. By default, this option is set to 8. The following example shows how to set the eden/survivor space ratio to 4:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:SurvivorRatio=4\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:TargetSurvivorRatio=percent","comment":"<p>Sets the desired percentage of survivor space (0 to 100) used after young garbage collection. By default, this option is set to 50%.</p> \n<p>The following example shows how to set the target survivor space ratio to 30%:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:TargetSurvivorRatio=30\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:TLABSize=size","comment":"<p>Sets the initial size (in bytes) of a thread-local allocation buffer (TLAB). Append the letter <code dir=\"ltr\">k</code> or <code dir=\"ltr\">K</code> to indicate kilobytes, <code dir=\"ltr\">m</code> or <code dir=\"ltr\">M</code> to indicate megabytes, <code dir=\"ltr\">g</code> or <code dir=\"ltr\">G</code> to indicate gigabytes. If this option is set to 0, then the JVM chooses the initial size automatically.</p> \n<p>The following example shows how to set the initial TLAB size to 512 KB:</p> \n<pre dir=\"ltr\" xml:space=\"preserve\">\r\n-XX:TLABSize=512k\r\n</pre>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseAdaptiveSizePolicy","comment":"<p>Enables the use of adaptive generation sizing. This option is enabled by default. To disable adaptive generation sizing, specify <code dir=\"ltr\">-XX:-UseAdaptiveSizePolicy</code> and set the size of the memory allocation pool explicitly (see the <code dir=\"ltr\">-XX:SurvivorRatio</code> option).</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseCMSInitiatingOccupancyOnly","comment":"<p>Enables the use of the occupancy value as the only criterion for initiating the CMS collector. By default, this option is disabled and other criteria may be used.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseConcMarkSweepGC","comment":"<p>Enables the use of the CMS garbage collector for the old generation. Oracle recommends that you use the CMS garbage collector when application latency requirements cannot be met by the throughput (<code dir=\"ltr\">-XX:+UseParallelGC</code>) garbage collector. The G1 garbage collector (<code dir=\"ltr\">-XX:+UseG1GC</code>) is another alternative.</p> \n<p>By default, this option is disabled and the collector is chosen automatically based on the configuration of the machine and type of the JVM. When this option is enabled, the <code dir=\"ltr\">-XX:+UseParNewGC</code> option is automatically set and you should not disable it, because the following combination of options has been deprecated in JDK 8: <code dir=\"ltr\">-XX:+UseConcMarkSweepGC -XX:-UseParNewGC</code>.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseG1GC","comment":"<p>Enables the use of the garbage-first (G1) garbage collector. It is a server-style garbage collector, targeted for multiprocessor machines with a large amount of RAM. It meets GC pause time goals with high probability, while maintaining good throughput. The G1 collector is recommended for applications requiring large heaps (sizes of around 6 GB or larger) with limited GC latency requirements (stable and predictable pause time below 0.5 seconds).</p> \n<p>By default, this option is disabled and the collector is chosen automatically based on the configuration of the machine and type of the JVM.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseGCOverheadLimit","comment":"<p>Enables the use of a policy that limits the proportion of time spent by the JVM on GC before an <code dir=\"ltr\">OutOfMemoryError</code> exception is thrown. This option is enabled, by default and the parallel GC will throw an <code dir=\"ltr\">OutOfMemoryError</code> if more than 98% of the total time is spent on garbage collection and less than 2% of the heap is recovered. When the heap is small, this feature can be used to prevent applications from running for long periods of time with little or no progress. To disable this option, specify <code dir=\"ltr\">-XX:-UseGCOverheadLimit</code>.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseNUMA","comment":"<p>Enables performance optimization of an application on a machine with nonuniform memory architecture (NUMA) by increasing the application's use of lower latency memory. By default, this option is disabled and no optimization for NUMA is made. The option is only available when the parallel garbage collector is used (<code dir=\"ltr\">-XX:+UseParallelGC</code>).</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseParallelGC","comment":"<p>Enables the use of the parallel scavenge garbage collector (also known as the throughput collector) to improve the performance of your application by leveraging multiple processors.</p> \n<p>By default, this option is disabled and the collector is chosen automatically based on the configuration of the machine and type of the JVM. If it is enabled, then the <code dir=\"ltr\">-XX:+UseParallelOldGC</code> option is automatically enabled, unless you explicitly disable it.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseParallelOldGC","comment":"<p>Enables the use of the parallel garbage collector for full GCs. By default, this option is disabled. Enabling it automatically enables the <code dir=\"ltr\">-XX:+UseParallelGC</code> option.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseParNewGC","comment":"<p>Enables the use of parallel threads for collection in the young generation. By default, this option is disabled. It is automatically enabled when you set the <code dir=\"ltr\">-XX:+UseConcMarkSweepGC</code> option. Using the <code dir=\"ltr\">-XX:+UseParNewGC</code> option without the <code dir=\"ltr\">-XX:+UseConcMarkSweepGC</code> option was deprecated in JDK 8.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseSerialGC","comment":"<p>Enables the use of the serial garbage collector. This is generally the best choice for small and simple applications that do not require any special functionality from garbage collection. By default, this option is disabled and the collector is chosen automatically based on the configuration of the machine and type of the JVM.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseSHM","comment":"<p>On Linux, enables the JVM to use shared memory to setup large pages.</p> \n<p>For more information, see <a href=\"#large_pages\">\"Large Pages\"</a>.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseStringDeduplication","comment":"<p>Enables string deduplication. By default, this option is disabled. To use this option, you must enable the garbage-first (G1) garbage collector. See the <code dir=\"ltr\">-XX:+UseG1GC</code> option.</p> \n<p><i>String deduplication</i> reduces the memory footprint of <code dir=\"ltr\">String</code> objects on the Java heap by taking advantage of the fact that many <code dir=\"ltr\">String</code> objects are identical. Instead of each <code dir=\"ltr\">String</code> object pointing to its own character array, identical <code dir=\"ltr\">String</code> objects can point to and share the same character array.</p>","type":"Advanced Garbage Collection Options"},{"arg":"-XX:+UseTLAB","comment":"<p>Enables the use of thread-local allocation blocks (TLABs) in the young generation space. This option is enabled by default. To disable the use of TLABs, specify <code dir=\"ltr\">-XX:-UseTLAB</code>.</p>","type":"Advanced Garbage Collection Options"}]